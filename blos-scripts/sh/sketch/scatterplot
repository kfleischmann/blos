#!/bin/bash

# DEFAULT VALUES
SKETCH_HH=100
SKETCH_SIZE_DELTA="0.5 0.1 0.05 0.01"
SKETCH_SIZE_EPSILON="0.1 0.01 0.001 0.0001"
DPI=100
FORMAT=png

# some arguments don't have a corresponding value to go with it such
# as in the --default example).
# note: if this is set to > 0 the /etc/hosts part is not recognized ( may be a bug )
while [[ $# > 1 ]]
do
key="$1"

case $key in
    -d|--dataset-dir)
    DATA_DIR="$2"
    shift # past argument
    ;;
    -p|--sketch-p)
    SKETCH_P="$2"
    shift # past argument
    ;;
    -D|--sketch-delta)
    SKETCH_SIZE_DELTA="$2"
    shift # past argument
    ;;
    -E|--sketch-epsilon)
    SKETCH_SIZE_EPSILON="$2"
    shift # past argument
    ;;
    -h|--heavy-hitters)
    SKETCH_HH="$2"
    shift # past argument
    ;;
    -R|--image-resolution)
    DPI="$2"
    shift # past argument
    ;;
    -f|--format)
    FORMAT="$2"
    shift # past argument
    ;;
    --default)
    DEFAULT=YES
    ;;
    *)
            # unknown option
    ;;
esac
shift # past argument or value
done

# cleanup
# we do not cleanup. we assume the dataset was generated
# rm -r ${DATA_DIR}

# prepare folders
mkdir -p ${DATA_DIR}/dataset
mkdir -p ${DATA_DIR}/sketch

# generate sample dataset
# NUM_SAMPLES=50000
# NUM_CENTROIDS=3
# resolution of the generated dataset
# RESOLUTION=2
# sketch size parameters
# resolution of the projected input-space
# SKETCH_P=2
# number of heavy hitters
# START=$(date +%s)
# ITERATIONS=0
# SEED=3

# generate data
#blos examples run eu.blos.java.ml.clustering.KMeansDatasetGenerator \
#	-points ${NUM_SAMPLES} \
#	-k ${NUM_CENTROIDS} \
#	-stddev ${STDDEV} \
#	-range ${RANGE} \
#	-output ${DATA_DIR}/dataset \
#	-resolution ${RESOLUTION} \
#	-seed ${SEED}

IFS=', ' read -r -a LIST_SKETCH_SIZE_DELTA <<< "$SKETCH_SIZE_DELTA"
IFS=', ' read -r -a LIST_SKETCH_SIZE_EPSILON <<< "$SKETCH_SIZE_EPSILON"
for d in "${LIST_SKETCH_SIZE_DELTA[@]}"
do
	for e in "${LIST_SKETCH_SIZE_EPSILON[@]}"
	do
		SKETCH_SIZE="${d}:${e}"
		SKETCH_FILE=${d}_${e}

		rm -r ${DATA_DIR}/sketch/${SKETCH_FILE}
		mkdir ${DATA_DIR}/sketch/${SKETCH_FILE}

		echo "scatterplot for $SKETCH_SIZE into $SKETCH_FILE"

		echo "build sketch..."
		exec 5>&1
		OUT=$(blos examples run eu.blos.java.ml.clustering.SketchedKMeans \
				-i ${DATA_DIR}/dataset/points \
				-o ${DATA_DIR}/sketch/${SKETCH_FILE} \
				-k 1 \
				-n 0 \
				-n 0 \
				-p ${SKETCH_P}  \
				-s ${SKETCH_SIZE} \
				-H ${SKETCH_HH} \
				--discover-inputspace \
				--skip-learning \
				--print-sketch \
				|tee >(cat - | grep "discovered" >&5))

		# read output parameters
		PARAM_SIZE=$(echo 	"$OUT"|grep 	"size(mb)="| awk -F "=" '{print $2}')
		PARAM_D=$(echo 		"$OUT"|grep 	"d="| awk -F "=" '{print $2}')
		PARAM_W=$(echo 		"$OUT"|grep 	"w="| awk -F "=" '{print $2}')


		DESC="delta:$d,epsilon:$e,size:$PARAM_SIZE,w:$PARAM_W,d:$PARAM_D"
		echo "sketch details $DESC"
		echo "plotting..."
		blos visualize sketch-inputspace \
				-i ${DATA_DIR}/sketch/${SKETCH_FILE}/reconstructed-input-space \
				-o ${DATA_DIR}/sketch/${SKETCH_FILE}/reconstructed-input-space \
				-t "${DESC}" \
				-f ${FORMAT} \
				-C \
				-d ${DPI}
	done
done

# merge images into a scatterplot
montage ${DATA_DIR}/sketch/*/reconstructed-input-space.png -title "" -tile ${#LIST_SKETCH_SIZE_EPSILON[@]}x${#LIST_SKETCH_SIZE_DELTA[@]} -geometry +7+0 ${DATA_DIR}/sketch/sketch-scatterplot.png
