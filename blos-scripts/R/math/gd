#!/usr/bin/env Rscript

args <- commandArgs(trailingOnly = TRUE)
args_contains <- function(str){
  for( a in args ){
    if( a == str ) return (TRUE)
  }
  FALSE
}

data <- read.table( file("stdin"), sep=",", header=TRUE)
# now you can read data$x and data$y


m <- nrow(data)
datay <- data[2]
datax0 <- rep( c(1), m ) 
datax1 <- data[3] 

# define the gradient function dJ/dtheata: 1/m * (h(x)-y))*x where h(x) = x*theta
# in matrix form this is as follows:
grad <- function(x, y, theta) {
  gradient <- (1/m)* (t(x) %*% ((x %*% t(theta)) - y))
  return(t(gradient))
}


# define gradient descent update algorithm
grad.descent <- function(x, y, maxit){
    theta <- matrix(c(0, 0), nrow=1) # Initialize the parameters
 
    alpha = .05 # set learning rate
    for (i in 1:maxit) {
      theta <- theta - alpha  * grad(x, y, theta)   
    }
 return(theta)
}

x <- as.matrix( cbind( datax0, datax1 ) )
y <- as.matrix( datay )


# results without feature scaling
print(grad.descent(x,y,20000))

