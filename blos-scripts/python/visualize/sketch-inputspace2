#!/usr/bin/env python

################################################################################
#
# Authors:       Fleischmann, Kay (fleischmann.kay@googlemail.com)
# Documentation: -
#
################################### LICENSE ####################################
#
# Copyright (C) 2014 Fleischmann, Kay
#
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included in
# all copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
# SOFTWARE.
#
################################ DOCUMENTATION #################################
#
# see output (-h)
#
#
#
################################################################################
import sys
import matplotlib.pyplot as plt
import numpy as np
import itertools


def run(**kwargs):

	counts = []
	dim_x = 0
	dim_y = 0
	input=kwargs['input']
	output=kwargs['output']
	format=kwargs['format']
	bar=kwargs['colorbar']
	dpi=int(kwargs['dpi'])
	display=bool(kwargs['display'])

	with open(input) as f:
		lines = f.readlines()

	l = map( lambda x: map( lambda a: int(a), x.strip().split(" ")), lines )


	#print l

	#print dim0
	#print dim1

	l.sort(key= lambda x: x[0], reverse=True)

	#img = np.zeros(len(l), len(l))

	for k,g in itertools.groupby(l, lambda x: x[0]):
		ll = list(g)
		if(len(filter( lambda a:a != 3, map(lambda x: len(x), ll)))>0):
			print list(ll)
		#print filter( lambda a:a != 3, map(lambda x: len(x), g))
		#print map( lambda x: x[0], sorted( list(g), key= lambda x: x[1] ))

if __name__=='__main__':
	# handle command line arguments
	# http://docs.python.org/2/library/argparse.html
	import argparse
	from argparse import RawTextHelpFormatter

	argparser = argparse.ArgumentParser(description="""
		visualize the sketch input-space
	""", formatter_class=RawTextHelpFormatter)


	# specify arguments
	argparser.add_argument("-v", "--verbose", action="store_true", help="turns on verbosity")
	argparser.add_argument("-i", "--input", action="store", required=True, help="sketch input file")
	argparser.add_argument("-o", "--output", action="store", required=True, help="output file")
	argparser.add_argument("-f", "--format", action="store", required=False, help="output image format", default="png")
	argparser.add_argument("-d", "--dpi", action="store", required=False, help="output image format dpi", default="600")
	argparser.add_argument("-D", "--display", action="store_true", required=False, help="display image" )
	argparser.add_argument("-C", "--colorbar", action="store_true", required=False, help="display colorbar" )
	argparser.add_argument("-t", "--text", action="store", required=False, help="show text" )

	# validate arguments
	args = argparser.parse_args()

	run(**vars(args))
