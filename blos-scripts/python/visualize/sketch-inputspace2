#!/usr/bin/env python

################################################################################
#
# Authors:       Fleischmann, Kay (fleischmann.kay@googlemail.com)
# Documentation: -
#
################################### LICENSE ####################################
#
# Copyright (C) 2014 Fleischmann, Kay
#
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included in
# all copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
# SOFTWARE.
#
################################ DOCUMENTATION #################################
#
# see output (-h)
#
#
#
################################################################################
import sys
import matplotlib.pyplot as plt
import numpy as np
import itertools


def run(**kwargs):
	input=kwargs['input']
	output=kwargs['output']
	format=kwargs['format']
	bar=kwargs['colorbar']
	dpi=int(kwargs['dpi'])
	display=bool(kwargs['display'])

	# e.g. -1:1.0

	with open(input) as f:
		lines = f.readlines()

	l = map(lambda x: map( lambda a: float(a), x.strip().split(" ")), lines)

	row_values = sorted(set(map(lambda x: x[0], l)), reverse=True)
	col_values = sorted(set(map(lambda x: x[1], l)))

	rows = len(row_values)
	cols = len(col_values)

	l.sort(key= lambda x: x[0], reverse=True)

	img = np.zeros((rows, cols))
	row = 0
	# sort sketch counts from left top top right bottom
	for k,g in itertools.groupby(l, lambda x: x[0]):
		col = 0
		for val in (map( lambda x: x[2], sorted( list(g), key= lambda x: x[1] ))):
			img[row][col] = val
			col += 1
		row += 1


	# build sketch
	fig = plt.figure()
	ax = fig.add_subplot(111)
	cax = ax.matshow(img)

	# 	0		(0 		1		2)
	# (index, 	(cols, col_values, num_items ))
	xlabels = map( lambda x: str(x[1][1][int(x[0]*(x[1][0]/x[1][2]))]), zip( range(len(list(ax.get_yticks()))), map( lambda x: (cols,col_values,len(ax.get_yticks())), list(ax.get_yticks()))))
	ylabels = map( lambda x: str(x[1][1][int(x[0]*(x[1][0]/x[1][2]))]), zip( range(len(list(ax.get_xticks()))), map( lambda x: (rows,row_values,len(ax.get_xticks())), list(ax.get_xticks()))))

	xlabels.insert(0,"")
	ylabels.insert(0,"")

	ax.set_xticklabels(xlabels, fontsize = 7)
	ax.set_yticklabels(ylabels, fontsize = 7)

	if kwargs['text']:
		fig.suptitle(kwargs['text'], fontsize=14 )

	if bool(kwargs['colorbar']):
		fig.colorbar(cax)


	if output:
		fig.savefig(output+"."+format, format=format, dpi=dpi, bbox_inches='tight' )

	if display:
		fig.show()

if __name__=='__main__':
	# handle command line arguments
	# http://docs.python.org/2/library/argparse.html
	import argparse
	from argparse import RawTextHelpFormatter

	argparser = argparse.ArgumentParser(description="""
		visualize the sketch input-space
	""", formatter_class=RawTextHelpFormatter)


	# specify arguments
	argparser.add_argument("-v", "--verbose", action="store_true", help="turns on verbosity")
	argparser.add_argument("-i", "--input", action="store", required=True, help="sketch input file")
	argparser.add_argument("-o", "--output", action="store", required=True, help="output file")
	argparser.add_argument("-f", "--format", action="store", required=False, help="output image format", default="png")
	argparser.add_argument("-d", "--dpi", action="store", required=False, help="output image format dpi", default="600")
	argparser.add_argument("-D", "--display", action="store_true", required=False, help="display image" )
	argparser.add_argument("-C", "--colorbar", action="store_true", required=False, help="display colorbar" )
	argparser.add_argument("-t", "--text", action="store", required=False, help="show text" )
	argparser.add_argument("-R", "--range", action="store", required=False, help="range of the view" )

	argparser.add_argument("-X", "--xrange", action="store", required=False, help="xrange of the view" )
	argparser.add_argument("-Y", "--yrange", action="store", required=False, help="yrange of the view" )

	# validate arguments
	args = argparser.parse_args()

	run(**vars(args))
