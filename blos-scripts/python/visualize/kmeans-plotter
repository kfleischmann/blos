#!/usr/bin/env python

################################################################################
#
# Authors:       Fleischmann, Kay (fleischmann.kay@googlemail.com)
# Documentation: -
#
################################### LICENSE ####################################
#
# Copyright (C) 2014 Fleischmann, Kay
#
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included in
# all copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
# SOFTWARE.
#
################################ DOCUMENTATION #################################
#
# see output (-h)
#
#
# blos visualize kmeans-plotter -v {PARAMS} >> store to file
#
################################################################################
import sys
import matplotlib.pyplot as plt
import csv
import os
import numpy as np

def run(**kwargs):
	inputFile 	= kwargs["input"]
	outputFile 	= kwargs["output"]
	centroids 	= kwargs["centroids"]

	show = kwargs["show"].lower()

	fig = plt.figure()
	ax1 = fig.add_subplot(111)

	cs = []
	xs = []
	ys = []

	minX = None
	maxX = None
	minY = None
	maxY = None

	dpi = 100

	if kwargs["dpi"]:
		dpi = int(kwargs["dpi"])

	if show == "dataset":
		fig = plt.figure()
		ax1 = fig.add_subplot(111)

		ax1.set_xlim([-1,1])
		ax1.set_ylim([-1,1])

		with open(inputFile, 'rb') as file:
			for line in file:
				# parse data
				csvData = line.strip().split(' ')

				x = float(csvData[0])
				y = float(csvData[1])

				if not minX or minX > x:
					minX = x
				if not maxX or maxX < x:
					maxX = x
				if not minY or minY > y:
					minY = y
				if not maxY or maxY < y:
					maxY = y

				xs.append(x)
				ys.append(y)

			# plot data
			ax1.scatter(xs, ys, s=25, c="#5b5b5b", edgecolors='None', alpha=0.5)

		if kwargs["centroids"]:
			cs1=[]
			xs1=[]
			ys1=[]
			centroids = kwargs[centroids]

			with open(centroids, 'rb') as file:
				for line in file:
					# parse data
					csvData = line.strip().split(' ')

					c = int(csvData[0])
					x = float(csvData[1])
					y = float(csvData[2])

					cs1.append(c)
					xs1.append(x)
					ys1.append(y)

				# plot data
				ax1.scatter(xs1, ys1, s=150, c=cs1, edgecolors='k', alpha=1.0, marker='s')


	if kwargs["grid"]:
		# default
		major_ticks = np.arange(-1.0,1.0,0.5)
		minor_ticks = np.arange(-1.0,1.0,0.5)

		if kwargs["gres"]:
			gr=kwargs["gres"].split(":")
			major_ticks = np.arange(float(gr[0]),float(gr[1]),float(gr[2]))
			minor_ticks = np.arange(float(gr[0]),float(gr[1]),float(gr[2]))

		ax1.set_xticks(major_ticks)
		ax1.set_xticks(minor_ticks, minor=True)
		ax1.set_yticks(major_ticks)
		ax1.set_yticks(minor_ticks, minor=True)

		# or if you want differnet settings for the grids:
		ax1.grid(which='both' )

	if kwargs["hideaxis"]:
		ax1.set_xticklabels([])
		ax1.set_yticklabels([])

	plt.savefig(outputFile, dpi=dpi, bbox_inches='tight' )

	print "\nPlotted file: %s" % outputFile


if __name__ == "__main__":
	# handle command line arguments
	# http://docs.python.org/2/library/argparse.html
	import argparse
	from argparse import RawTextHelpFormatter

	argparser = argparse.ArgumentParser(description="""
	blos kmeans-plotter.
	""", formatter_class=RawTextHelpFormatter)

	# specify arguments
	argparser.add_argument("-v", "--verbose",   action="store_true", help="turns on verbosity")
	argparser.add_argument("-H", "--hideaxis",   action="store_true", help="hide axis text")
	argparser.add_argument("-i", "--input", action="store", required=True, help="input file")
	argparser.add_argument("-o", "--output", action="store", required=True, help="output file")
	argparser.add_argument("-c", "--centroids", action="store", required=False, help="show centeroids of this file")
	argparser.add_argument("-d", "--dpi", action="store", required=False, help="dpi of the output file")
	argparser.add_argument("-g", "--grid", action="store_true", required=False, help="shows a grid")
	argparser.add_argument("-R", "--gres", action="store", required=False, help="grid resolution min,max,space")

	argparser.add_argument("-s", "--show", action="store", required=False, help="result|dataset")


	# validate arguments
	args = argparser.parse_args()


	run(**vars(args))
