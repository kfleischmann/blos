#!/usr/bin/env python

import sys
import os
import json
import fileinput

sys.path.append(".")


def dict_get( doc, aval ):
  if( len(aval) > 0 ):
    return  dict_get( doc[aval[0]], aval[1:] )
  else:
    return doc

def run(**kwargs):
  try:
    import pymongo_hadoop
    from pymongo_hadoop import BSONMapper
  except:
    print >> sys.stderr, "pymongo_hadoop is not installed or in path - will try to import from source tree."
    here = os.path.abspath(__file__)
    module_dir = os.path.join(os.path.dirname(os.path.dirname(os.path.dirname(here))),
      'language_support',
      'python')
    sys.path.append(module_dir)
  print >> sys.stderr, sys.path
  from pymongo_hadoop import BSONMapper
  
  fields  = kwargs['fields'].split(",")
  
  sys.stdout.write(kwargs['fields'])
  sys.stdout.write("\n")
  
  for line in sys.stdin:
    doc = json.loads(line)
    values = []
    for f in fields: values.append( str(dict_get(doc, f.split(".")) ) )
  
    sys.stdout.write(",".join(values) )
    sys.stdout.write("\n")

if __name__=='__main__':
  # handle command line arguments
  # http://docs.python.org/2/library/argparse.html
  import argparse
  from argparse import RawTextHelpFormatter

  argparser = argparse.ArgumentParser(description="""
    read json from stdin and extract fields
  """, formatter_class=RawTextHelpFormatter)

  # specify arguments
  argparser.add_argument("-f", "--fields", action="store", required=True, help="extract values from input bson")

  # validate arguments
  args = argparser.parse_args()

  try:
    # execute main script and delegate command line options
    run(**vars(args))

  except Exception as e:
    print "AN ERROR OCCOURED:", e

  if( bool(vars(args)['verbose']) ):
    import traceback, sys
    traceback.print_exc(file=sys.stderr)
